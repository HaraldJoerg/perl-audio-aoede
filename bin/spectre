#!/usr/bin/env perl
use 5.032;
use strict;
use feature "signatures";
no warnings "experimental";

use Prima qw(Dialog::FileDialog);
use Prima::Application name => 'Aoede Sound Viewer';
use PDL::Graphics::Prima;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Time::HiRes qw( tv_interval gettimeofday );

use Audio::Aoede;
use Audio::Aoede::Player::SoX;
use Audio::Aoede::Recorder::SoX;
use Audio::Aoede::Units qw( symbol );
use Audio::Aoede::UI::Spectre::Options;
use Audio::Aoede::UI::Spectrum;

######################################################################
# Configuration, some hardwired right now
my $fps = 50;
my $rate = 48000; # we have ~800 samples per second
my $bits = 16;    # Where should this be defined?
my $channels = 2; # Where should this be defined?
my $limit = 2500;
my $n_spectrum_samples = 2400;
my $resolution = $rate / $n_spectrum_samples;

my $path;
my $current_directory;

my $sound;
my $n_done;
my $n_resume = 0;
my $n_available;
my ($left,$right);

my ($key_play,$key_pause,$key_stop);
my ($current_file_label,$pos_slider);
my $spectrum;


my $timer;
my $start_time;

my $A = Audio::Aoede->new(rate => $rate);

my $recorder = Audio::Aoede::Recorder::SoX->new(
    rate => $rate,
    bits => 16,
    channels => 2
);

my $player = Audio::Aoede::Player::SoX->new(
    rate => $rate,
    bits => 16,
    channels => 2
);


sub process_file {
    my $open = Prima::Dialog::OpenDialog->new(
        filter => [
            ['Ogg vorbis sound files' => '*.ogg'],
            ['All' => '*'],
        ],
        directory => $current_directory || '.',
    );
    if ($open->execute) {
        stop();
        $path = $open->fileName;
        $current_file_label->text("Playing: $path");
        $current_file_label->repaint;
        $current_directory = $open->directory;
        $sound = $recorder->read_file($path);
        $n_available = $sound->dim(0);
        $n_done = 0;
        $n_resume = 0;
        ($left,$right) = $sound->dog;
        my $sound_time = $left->dim(0) / $rate;
        $pos_slider->max($sound_time);
        $key_play->enabled(1);
    }

}


my $main = Prima::MainWindow->create(
    text  => 'Aoede Sound Viewer',
    backColor => cl::White,
    # Prima::Menu has a description of these formats
    menuItems =>
    [
        ['~File' =>
         [
             [
                 '~Open' => 'Ctrl+O', '^O',
                 sub { process_file() },
             ],
             ['~Quit' => 'Ctrl+Q', '^Q',
              sub { $::application->close } ],
         ],
     ],
    ]
);

my $top = $main->insert(
    Widget =>
    pack => { side => 'top' }
);

my $file_info = $top->insert(
    Widget =>
    pack => { side => 'left' }
);

$current_file_label = $file_info->insert(
    Label =>
    text => $path // '(no file)',
    pack => { side => 'top' }
);

$pos_slider = $file_info->insert(
    Slider =>
    increment => 1,
    min => 0,
    max => 100,
    size => [600,30],
    autoTrack => 0,
    ticks => [
        { value => 60,
          text => '1:00',
      },
        { value => 0,
          text => '0:00',
      }
    ],
    pack => { side => 'top' }
);

my $keys = $file_info->insert(
    Widget =>
    pack => { side => 'top' }
);

$key_play = $keys->insert(
    Button =>
    pack => { side => 'left' },
    text => symbol('PLAY'),
    enabled => 0,
    onClick => sub ($widget) {
        $key_pause->enabled(1);
        $key_stop->enabled(1);
        $key_play->enabled(0);
        $n_done  or  $player->open_pipe;
        $start_time = [gettimeofday];
        $timer->start;
    },
);

$key_pause = $keys->insert(
    Button =>
    pack => { side => 'left' },
    text => symbol('PAUSE'),
    enabled => 0,
    onClick => sub ($widget) {
        $key_play->enabled(1);
        $key_pause->enabled(0);
        $key_stop->enabled(1);
        pause();
    },
);

$key_stop = $keys->insert(
    Button =>
    pack => { side => 'left' },
    text => symbol('STOP'),
    enabled => 0,
    onClick => sub ($widget) {
        $key_play->enabled(1);
        $key_pause->enabled(0);
        $key_stop->enabled(0);
        stop();
    },
);

my $config_ui = Audio::Aoede::UI::Spectre::Options->new(
    parent => $top,
    fps => $fps // 1000/$timer->timeout,
    fps_callback => sub ($fps) { new_fps ($fps) },
    resolution => $resolution,
    resolution_callback => sub ($res) {
        $res  and  $n_spectrum_samples = $rate / $res;
    },
    frequency_limit => $limit,
    frequency_limit_callback => sub ($new) {
        $limit = $new;
        $spectrum->set_limit($new);
    },
);

$timer = $::application->insert(
    Timer =>
    timeout => 1000 / $fps,
    onTick  => sub { tick() }
);


sub new_fps ($fps) {
    $fps  and  $timer->timeout(1000/$fps);
}


my $spectrum_w;
$spectrum_w = $main->insert(
    Widget =>
    onClose => sub { undef $spectrum_w },
    pack      => { side => 'top' },
);

$spectrum = Audio::Aoede::UI::Spectrum->new(
    parent => $spectrum_w,
    channels => [qw( left right )],
    limit => $limit,
    size => [800,400],
    pack      => { side => 'top', fill => 'both' },
);


sub run_spectrum ($todo) {
    my $last = $n_done + $todo - 1;
    if ($last < $n_available) {
        $player->send_piddle($sound->slice([$n_done,$last],[0,1])->transpose);
        my $end = $n_done + $n_spectrum_samples - 1;
        if ($end >= $n_available) {
            $end = $n_available - 1;
        }
        $todo = $n_spectrum_samples;
        my $c_left = $left->slice([$n_done,$end]);
        my $s_left =  $A->spectrum($c_left,$limit);
        my $c_right = $right->slice([$n_done,$end]);
        my $s_right = $A->spectrum($c_right,$limit);
        $spectrum->update(left => $s_left, right => $s_right);
        $n_done = $last;
    }
    else {
        $key_play->enabled(1);
        $key_stop->enabled(0);
        $n_done = 0;
        $timer->stop;
        $spectrum->clear;
        $player->close_pipe;
    }
}


sub pause {
    $n_resume = $n_done;
    $timer->stop;
}


sub stop {
    $timer->stop;
    $player->close_pipe;
    $n_done = 0;
    $n_resume = 0;
}


sub tick {
    my $current = $n_resume + int (tv_interval($start_time) * $rate + 1.5);
    $pos_slider->value($current/$rate);
    my $todo = ($current - $n_done) & -2;
    run_spectrum($todo);
}


Prima->run;
