#!/usr/bin/env perl

our $title = 'Aoede Sound Viewer';
our $VERSION = 0.01;

use 5.032;
use strict;
use feature "signatures";
use feature "try";
no warnings "experimental";

use Getopt::Long;
use Prima::noARGV;
use Prima 1.76 qw( Application Dialog::FileDialog Sliders Spinner);
use Prima::MsgBox qw(message);
use PDL;
use PDL::DSP::Windows;
use PDL::Graphics::Prima;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Time::HiRes qw( tv_interval gettimeofday );

use Audio::Aoede;
use Audio::Aoede::Player::SoX;
use Audio::Aoede::Recorder::PortAudio;
use Audio::Aoede::Recorder::SoX;
use Audio::Aoede::Units qw( symbol );
use Audio::Aoede::File;
use Audio::Aoede::UI::Busy;
use Audio::Aoede::UI::File;
use Audio::Aoede::UI::Spectre::Options;
use Audio::Aoede::UI::Spectrogram;
use Audio::Aoede::UI::Spectrum;
use Audio::Aoede::UI::Timer;

# Linux shows the name in the task bar
$::application->name($title);

######################################################################
# Configuration, some hardwired right now
my %options = (
    fps           => 20,
    rate          => 48000,     # we have ~800 samples per second
    bits          => 16,        # fixed in the current implementation
    channels      => 2,         # fixed in the current implementation
    min_frequency => 50,
    max_frequency => 2500,
    resolution    => 10,
    axis_type     => sc::Log,
    A4_pitch      => 440,
);
my $run; # Automated runs are for profiling

# Allow overriding on the command line
GetOptions(
    "fps=f"           => \$options{fps},
    "resolution=i"    => \$options{resolution},
    "min_frequency=i" => \$options{min_frequency},
    "max_frequency=i" => \$options{max_frequency},
    "rate=i"          => \$options{rate},
    "run=s"           => \$run,
);

my $state = 'idle';

# We define UI items globally ... the UI widgets affect each other
# quite a lot.
my ($key_record,$key_play,$key_stop);
my ($spectrum_ui,$spectrogram_ui);
my $busy_ui;

my $timer = Audio::Aoede::UI::Timer->new(
    fps => $options{fps},
);

my $A = Audio::Aoede->new(rate => $options{rate});

my %recorders = build_recorders($options{rate},$options{bits},$options{channels});

# These players might work, but they are not in focus right now
#my $player = Audio::Aoede::Player::PortAudio->new(
#my $player = Audio::Aoede::Player::Ecasound->new(
my $player = Audio::Aoede::Player::SoX->new(
    rate     => $options{rate},
    bits     => $options{bits},
    channels => $options{channels},
);

my $current;

my $auto_close = sub {};

my $main = Prima::MainWindow->create(
    text  => $title,
    backColor => hex('fff8e7'),
    visible => 0,
    # Prima::Menu has a description of these formats
    menuItems =>
    [
        ['~File' =>
         [
             [
                 '~Open' => 'Ctrl+O', '^O',
                 sub { open_file() },
             ],
             [
                 'Save ~As...' =>
                 sub { save_as() },
             ],
             ['~Quit' => 'Ctrl+Q', '^Q',
              sub { $::application->close }
          ],
         ],
     ],
        ['~Run' =>
         [
             ['~Spectrogram',
              sub { run_spectrogram() },
          ],
         ],
     ],
    ],
);


use Prima::EventHook;
sub keyboard_hook ($object,$event,$code,$key,@rest) {
    if (chr($code)  eq  ' ') {
        if ($state eq 'playing') {
            pause();
            return 0;
        }
        if ($state eq 'paused') {
            play();
            return 0;
        }
    }
    return 1;
}
Prima::EventHook::install(\&keyboard_hook,
                          param => undef,
                          event => 'KeyDown',
                          object => undef,
                          children => 0,
                      );


my $file_ui = Audio::Aoede::UI::File->new(
    parent => $main,
    pack => { side => 'top', anchor => 'w', padx => 20, },
);


sub open_file ($path = undef) {
    busy('Open a file');
    $path //= $file_ui->open_file;
    if ($path) {
        stop();
        $current  = Audio::Aoede::File->new(path => $path);
        $main->text("$title: " . $current->file_name);
        # A lot of the following oughta go to AA::File
        $current->set_sound($recorders{file}->read_file($path));
        my $sound_time = $current->n_samples / $options{rate};
        $current->set_duration($sound_time);
        $file_ui->set_duration($sound_time);
        $file_ui->set_current_file($current); # I'd like to get rid of
                                              # that coupling
        $file_ui->set_label($current->file_name);
        $key_play->enabled(1);
    }
    idle();
}

sub save_as {
    my $path = $file_ui->save_as();
    if ($path) {
        my $writer = Audio::Aoede::Player::SoX->new(
            rate => $options{rate},
            bits => $options{bits},
            channels => $options{channels},
        );
        $writer->play_piddle($current->sound,$path);
        $current->set_path($path);
        $main->text("$title: " . $current->file_name);
    }
}


my $keys = $main->insert(
    Widget =>
    ownerBackColor => 1,
    pack => { side => 'top', anchor => 'w', padx => 20, }
);

$key_record = $keys->insert(
    Button =>
    pack => { side => 'left' },
    text => symbol('RECORD'),
    enabled => 1,
    onClick => sub ($widget) {
        record();
    },
);

$key_play = $keys->insert(
    Button =>
    pack => { side => 'left' },
    text => symbol('PLAY'),
    enabled => 0,
    onClick => sub ($widget) {
        if ($state  eq  'playing') {
            pause();
        } else {
            play();
        }
    },
);

$key_stop = $keys->insert(
    Button =>
    pack => { side => 'left' },
    text => symbol('STOP'),
    enabled => 0,
    onClick => sub ($widget) {
        stop();
    },
);


sub playback ($delta) {
    my $first = int($current->position * $options{rate} + 0.5) ;
    my $last  = $first + int($delta * $options{rate} + 0.5 ) - 1;
    $current->increment_position($delta);
    run_current_spectrum();
    if ($last >= $current->n_samples) {
        $last = $current->n_samples - 1;
    }
    if ($last > $first) {
        $player->send_piddle($current->sound->slice([],[$first,$last]));
    }
    $file_ui->update_position();
    if ($last >= $current->n_samples - 1  &&  $state eq 'playing') {
        stop();
        &$auto_close;
    }
}


sub play () {
    $key_record->enabled(0);
    $key_stop->enabled(1);
    $key_play->text(symbol('PAUSE'));
    $player->open_pipe;
    $timer->add_callback( \&playback );
    $spectrum_ui->show;
    $timer->start;
    $state = 'playing';
}


sub pause () {
    $key_record->enabled(1);
    $key_play->enabled(1);
    $key_play->text(symbol('PLAY'));
    $key_stop->enabled(1);
    $timer->pause();
    $player->close_pipe;
    $state = 'paused';
    # show_state(); # uncomment for some debugging
}

my $spectrum_w;
$spectrum_w = $main->insert(
    Widget =>
    ownerBackColor => 1,
    onClose => sub { undef $spectrum_w },
    pack      => { side => 'top', expand => 1, fill => 'both' },
);

$spectrum_ui = Audio::Aoede::UI::Spectrum->new(
    parent => $spectrum_w,
    channels => [qw( left right )],
    min_frequency => $options{min_frequency},
    max_frequency => $options{max_frequency},
    size => [800,400],
    pack      => { side => 'left', expand => 1, fill => 'both' },
);

my $config_ui = Audio::Aoede::UI::Spectre::Options->new(
    parent => $spectrum_w,
    pack => { side => 'left', padx => 10 },
);


sub run_spectrum ($end) {
    return unless $end; # just starting
    return unless $current->n_samples;
    return unless $options{resolution} > 0;
    my $n_spectrum_samples = int($options{rate}/$options{resolution});
    my $window = PDL::DSP::Windows->new($n_spectrum_samples);
    my $first = int($current->position * $options{rate} + 0.5)
        - $n_spectrum_samples;
    my $last  = $first + $n_spectrum_samples - 1;
    if ($first >= 0  and  $last < $current->n_samples) {
        my $c_left = $current->channel(0)->slice([$first,$last]) * $window->samples;
        my $s_left =  $A->spectrum($c_left,$options{max_frequency});
        my $c_right = $current->channel(1)->slice([$first,$last]) * $window->samples;
        my $s_right = $A->spectrum($c_right,$options{max_frequency});
        $spectrum_ui->update(left => $s_left, right => $s_right);
    }
}


sub run_current_spectrum () {
    return unless $current;
    $spectrum_ui->show;
    run_spectrum($current->position);
}


sub calculate_spectrogram ($sound) {
    $options{min_frequency} >= 1  or  $options{min_frequency} = 1;
    my $sum = $sound->sumover;
    my $n_total_samples = $sum->dim(0);
    my $n_times = $n_total_samples / $options{rate} * $options{fps};
    return unless $n_times;     # nothing to do, silentl return
    my $n_spectrum_samples = int($options{rate}/$options{resolution});
    my $window = PDL::DSP::Windows->new($n_spectrum_samples);
    my $window_samples = $window->samples;
    my $d_samples = int (($n_total_samples - $n_spectrum_samples) / $n_times);
    my $first = 0;
    my $last = $n_spectrum_samples - 1;
    my @spectra = ();
    my $min_index = int ($options{min_frequency} / $options{resolution} + 0.999);
    while ($last < $n_total_samples-1) {
        my $windowed = $sum->slice([$first,$last]) * $window_samples;
        my $spectrum = $A->spectrum($windowed,$options{max_frequency})->slice([$min_index,-1]);
        push @spectra, $spectrum;
        $first += $d_samples;
        $last  += $d_samples;
    }
    return pdl(@spectra)->transpose;
}


sub run_spectrogram () {
    my $spectrogram = calculate_spectrogram($current->sound);
    return unless defined $spectrogram; # user cancelled
    if ($spectrogram_ui) {
        $spectrogram_ui->update_spectrogram($spectrogram);
    }
    else {
        my $n_total_samples = $current->n_samples;
        $spectrogram_ui = Audio::Aoede::UI::Spectrogram->new(
            parent => $main,
            time => $n_total_samples/$options{rate},
            min_frequency => $options{min_frequency},
            max_frequency => $options{max_frequency},
        );
        $spectrogram_ui->show_spectrogram($spectrogram);
    }
}


sub update_spectrogram {
    if ($spectrogram_ui) {
        my $spectrogram = calculate_spectrogram($current->sound);
        if (defined ($spectrogram)) {
            $spectrogram_ui->update_spectrogram($spectrogram);
        }
    }
}


sub read_pipe ($delta) {
    my $n_samples = int ($options{rate} * $delta + 0.5);
    return if $n_samples <= 0;
    my $sound = $recorders{microphone}->read_pipe($n_samples);
    $current->increment_position($delta);
    $current->set_duration($current->position);
    $player->send_piddle($sound);
    $current->append_sound($sound);
    $file_ui->set_duration($current->position);
    $file_ui->set_position($current->position);
    run_current_spectrum;
}


sub record () {
    if ($current) {
        use Prima::MsgBox qw( message );
        my $response = message_box(
            q(We have a sound),
            q(Drop current sound or cancel recording?),
            mb::Yes|mb::Cancel|mb::Question);
        return if ($response eq mb::Cancel);
        if ($response  eq  mb::Yes) {
        }
    }
    $current = Audio::Aoede::File->new();
    $current->set_sound(zeroes(2,0));
    $file_ui->recording($current);
    $main->text("$title");
    $key_record->enabled(0);
    $key_stop->enabled(1);
    $key_play->enabled(0);
    $key_play->text(symbol('PLAY'));

    $player->open_pipe;
    $recorders{microphone}->open_pipe;
    $timer->add_callback(\&read_pipe);
    # show_state();
    $timer->start;
    $state = 'recording';
}


sub stop {
    $key_record->enabled(1);
    $key_play->enabled(1);
    $key_play->text(symbol('PLAY'));
    $key_stop->enabled(0);

    if ($state eq 'playing') {
        $timer->stop;
        $player->close_pipe;
        $spectrum_ui->clear;
        $current->set_position(0);
        $file_ui->set_position(0);
    }
    elsif ($state eq 'paused') {
        $player->close_pipe;
        $spectrum_ui->clear;
        $current->set_position(0);
        $file_ui->set_position(0);
    }
    elsif ($state eq 'recording') {
        $timer->stop;
        $recorders{microphone}->close_pipe;
        $player->close_pipe;
        $spectrum_ui->clear;
        # Now allow for replay
        my $sound_time = $current->n_samples / $options{rate};
        $current->update_sound;
        $current->set_position(0);
        $current->set_duration($sound_time);
        $file_ui->set_duration($sound_time);
        $file_ui->set_position(0);
    }
    $state = 'idle';
    # show_state();
}


$::application->set(
    'onIdle' => sub {
        if ($run) {
            # This is for profiling: Read a file, play it, and
            # terminate the application.  Show the GUI during the
            # process.
            $auto_close = sub { $::application->close };
            my $path = $run;
            $current = Audio::Aoede::File->new(path => $path);
            $run = '';
            open_file($path);
	    $player->open_pipe;
            $state = 'playing';
	    $timer->add_callback(\&playback);
            $spectrum_ui->show;
	    $timer->start;
        }
    }
);

$main->show;
Prima->run;

# This can be invoked for diagnostic purposes.  Tread carefully while
# a timer is running.

sub show_state {
    use Prima::MsgBox qw( message );
    my %state = (
        'number of samples' => $current->sound->n_samples,
        'current time'      => $current->position,
        'current sample'    => $current->position * $options{rate},
    );
    my $formatted = join "\n",
        map { "$_ = $state{$_}" } sort keys %state;
    message($formatted,mb::Ok);
}


sub build_recorders ($rate,$bits,$channels) {
    my %recorders;
    # This one is unconditionally required for now
    use Audio::Aoede::Recorder::SoX;
    $recorders{file} = Audio::Aoede::Recorder::SoX->new(
        rate => $options{rate},
        bits => $bits,
        channels => $channels,
    );
    try {
        use Audio::Aoede::Recorder::PortAudio;
        $recorders{microphone} = Audio::Aoede::Recorder::PortAudio->new(
            rate => $options{rate},
            bits => $options{bits},
            channels => $options{channels},
        );
    }
    catch ($error) {
        warn <<~EOW;
            The PortAudio recorder is not available: '$error'.
            Falling back to SoX recording.
            EOW
        $recorders{microphone} = $recorders{file};
    }
    return %recorders;
}


sub format_time ($time) {
    return sprintf("%02d:%05.2f",int($time/60),$time % 60);
}


sub get_config ($key) {
    return $options{$key};
}


sub set_fps ($new) {
    if ($new  and  $new =~ /^\s*(\d+(\.\d*)?|\.\d+)\s*$/ ) {
        $options{fps} = $new;
        $timer->set_fps($new);
    }
    # We should warn and indicate bad values here
}


sub resolution () {
    return $options{resolution};
}


sub set_resolution ($new) {
    if ($new  and  $new =~ /^\s*\d+\s*$/) {
        $options{resolution} = $new;
        run_current_spectrum();
    }
    else {
        $new  and  die "Don't do that: resolution = '$new'";
    }
}


sub set_min_frequency ($new) {
    if ($new > 0 and  $new =~ /^\s*\d+\s*$/) {
        if ($new > $options{max_frequency} - 3 * $options{resolution}) {
            $new = $options{max_frequency} - 3 * $options{resolution};
            $new = 1 if $new < 1;
        }
        $options{min_frequency} = $new;
        $spectrum_ui->set_min_frequency($new);
        if ($spectrogram_ui) {
            $spectrogram_ui->set_min_frequency($new);
        }
        run_current_spectrum();
    }
}


sub set_max_frequency ($new) {
    if ($new  and  $new =~ /^\s*\d+\s*$/) {
        if ($new < $options{min_frequency} + 3 * $options{resolution}) {
            $new = $options{min_frequency} + 3 * $options{resolution};
        }
        $options{max_frequency} = $new;
        $spectrum_ui->set_max_frequency($new);
        if ($spectrogram_ui) {
            $spectrogram_ui->set_max_frequency($new);
        }
        run_current_spectrum();
    }
    else {
        $new
            and  $new <= 0.5 * $options{max_frequency}
            and  die "Don't do that: maximum frequency = '$new'";
    }
}


sub set_axis_linear () {
    $spectrum_ui->set_axis_linear;
}


sub set_axis_logarithmic () {
    $spectrum_ui->set_axis_logarithmic;
}


sub set_tuner_base ($new) {
    $options{A4_pitch} = $new;
    run_current_spectrum();
}


sub show_halftone_grid {
    $spectrum_ui->show_halftone_grid;
}


sub hide_halftone_grid {
    $spectrum_ui->hide_halftone_grid;
}


sub busy ($text) {
    $busy_ui = Audio::Aoede::UI::Busy->new(
        parent => $main,
        text   => $text,
    );
}

sub idle {
    $busy_ui->destroy;
    undef $busy_ui;
    $main->focus;
}
