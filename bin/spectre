#!/usr/bin/env perl
use 5.032;
use strict;
use feature "signatures";
use feature "try";
no warnings "experimental";

use Getopt::Long;
use File::Spec;
use Prima::noARGV;
use Prima qw( Dialog::FileDialog Sliders);
use Prima::Application name => 'Aoede Sound Viewer';
use PDL;
use PDL::DSP::Windows;
use PDL::Graphics::Prima;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Time::HiRes qw( tv_interval gettimeofday );

use Audio::Aoede;
use Audio::Aoede::Player::SoX;
use Audio::Aoede::Recorder::PortAudio;
use Audio::Aoede::Recorder::SoX;
use Audio::Aoede::Units qw( symbol );
use Audio::Aoede::UI::Spectre::Options;
use Audio::Aoede::UI::Spectrum;
use Audio::Aoede::UI::Timer;

######################################################################
# Configuration, some hardwired right now
my $fps = 20;
my $rate = 48000; # we have ~800 samples per second
my $bits = 16;    # Where should this be defined?
my $channels = 2; # Where should this be defined?
my $limit = 2500;
my $f_min = 50;
my $resolution = 20;
my $run; # Automated runs are for profiling

# Allow overriding on the command line
GetOptions(
    "fps=f" => \$fps,
    "resolution=i" => \$resolution,
    "limit=i" => \$limit,
    "rate=i" => \$rate,
    "run=s" => \$run,
);

my $title = 'Aoede Sound Viewer';
my $path;
my $current_directory;

my $sound = zeroes(2,0);
my ($left,$right);

my $state = 'idle';
my ($key_record,$key_play,$key_pause,$key_stop);
my ($current_file_label,$pos_slider,$pos_number);
my $spectrum;
my $main;


my $timer = Audio::Aoede::UI::Timer->new(
    fps => $fps,
);


my $A = Audio::Aoede->new(rate => $rate);

my %recorders = build_recorders($rate,$bits,$channels);

#my $player = Audio::Aoede::Player::PortAudio->new(
#my $player = Audio::Aoede::Player::Ecasound->new(
my $player = Audio::Aoede::Player::SoX->new(
    rate => $rate,
    bits => $bits,
    channels => $channels,
);


sub process_file {
    my $open = Prima::Dialog::OpenDialog->new(
        filter => [
            ['Ogg vorbis sound files' => '*.ogg'],
            ['All' => '*'],
        ],
        directory => $current_directory || '.',
    );
    if ($open->execute) {
        stop();
        $path = $open->fileName;
        my ($vol,$dirs,$file) = File::Spec->splitpath($path);
        $current_file_label->text("Playing: $file");
        $main->text("$title: $file");
        $current_file_label->repaint;
        $current_directory = $open->directory;
        $sound = $recorders{file}->read_file($path);
        ($left,$right) = $sound->transpose->dog;
        my $sound_time = $left->dim(0) / $rate;
        $pos_slider->max($sound_time);
        $key_play->enabled(1);
        $timer->reset_time;
    }

}


sub save_as {
    my $save = Prima::Dialog::SaveDialog->new(
        filter => [
            ['Ogg vorbis sound files' => '*.ogg'],
            ['All' => '*'],
        ],
        directory => $current_directory || '.',
    );
    if ($save->execute) {
        my $path = $save->fileName;
        my $writer = Audio::Aoede::Player::SoX->new(
            rate => $rate,
            bits => $bits,
            channels => $channels,
        );
        $writer->play_piddle($sound,$path);
        my ($vol,$dirs,$file) = File::Spec->splitpath($path);
        $current_file_label->text("Playing: $file");
        $main->text("$title: $file");
    }
}

my $auto_close = sub {};


$main = Prima::MainWindow->create(
    text  => $title,
    backColor => hex('fff8e7'),
    # Prima::Menu has a description of these formats
    menuItems =>
    [
        ['~File' =>
         [
             [
                 '~Open' => 'Ctrl+O', '^O',
                 sub { process_file() },
             ],
             [
                 'Save ~As...' =>
                 sub { save_as() },
             ],
             ['~Quit' => 'Ctrl+Q', '^Q',
              sub { $::application->close }
          ],
         ],
     ],
    ],
    onClose => \&shutdown,
);
$main->hide;

my $top = $main->insert(
    Widget =>
    backColor => hex('fff8e7'),
    pack => { side => 'top', anchor => 'w', }
);

my $file_info = $top->insert(
    Widget =>
    ownerBackColor => 1,
    pack => { side => 'left', padx => 20,}
);

$current_file_label = $file_info->insert(
    Label =>
    text => $path // '(no file)',
    ownerBackColor => 1,
    pack => { side => 'top', anchor => 'w', }
);

my $current_pos = 0;
$pos_slider = $file_info->insert(
    Slider =>
    increment => 1,
    min => 0,
    max => 100,
    size => [600,50],
    autoTrack => 1,
    ribbonStrip => 1,
    ticks => [
        { value => 60,
          text => '1:00',
      },
        { value => 0,
          text => '0:00',
      }
    ],
    ownerBackColor => 1,
    pack => { side => 'top', anchor => 'w', },
    onChange => \&pos_slider_change,
);

sub adjust_slider($end) {
    $current_pos = $end;
    $pos_slider->value($end);
    $pos_slider->repaint;
    $pos_number->text(format_time($end));
    $pos_number->repaint;
}

sub pos_slider_change ($widget) {
    my $new = $widget->value;
    if ($new != int $current_pos) {
        # Change happened by user, not by timer
        my $delta = $new - $current_pos;
        $timer->shift_time($delta);
        $current_pos = $widget->value;
        $pos_number->text(format_time($current_pos));
        $pos_number->repaint;
        run_spectrum($current_pos);
    }
}

my $keys = $file_info->insert(
    Widget =>
    ownerBackColor => 1,
    pack => { side => 'top', anchor => 'w', }
);

$key_record = $keys->insert(
    Button =>
    pack => { side => 'left' },
    text => symbol('RECORD'),
    enabled => 1,
    onClick => sub ($widget) {
        record();
    },
);


sub playback ($end) {
    my $first = $current_pos * $rate;
    adjust_slider($end);
    run_spectrum($end);
    my $last  = int($end * $rate + 0.5) - 1;
    if ($last >= $sound->dim(1)) {
        $last = $sound->dim(1) - 1;
    }
    if ($last > $first) {
        $player->send_piddle($sound->slice([0,1],[$first,$last]));
    }
    if ($last >= $sound->dim(1) - 1  &&  $state eq 'playing') {
        stop();
        &$auto_close;
    }
}

sub play () {
    $key_record->enabled(0);
    $key_pause->enabled(1);
    $key_stop->enabled(1);
    $key_play->enabled(0);
    $player->open_pipe;
    $timer->add_callback( \&playback );
    $timer->start;
    $state = 'playing';
}

$key_play = $keys->insert(
    Button =>
    pack => { side => 'left' },
    text => symbol('PLAY'),
    enabled => 0,
    onClick => sub ($widget) {
        play();
    },
);


sub pause () {
    $key_record->enabled(1);
    $key_play->enabled(1);
    $key_pause->enabled(0);
    $key_stop->enabled(1);
    $timer->pause();
    $player->close_pipe;
    $state = 'paused';
    # show_state(); # uncomment for some debugging
}

$key_pause = $keys->insert(
    Button =>
    pack => { side => 'left' },
    text => symbol('PAUSE'),
    enabled => 0,
    onClick => sub ($widget) {
        pause();
    },
);

$key_stop = $keys->insert(
    Button =>
    pack => { side => 'left' },
    text => symbol('STOP'),
    enabled => 0,
    onClick => sub ($widget) {
        stop();
    },
);

$pos_number = $keys->insert(
    Label =>
    text => format_time($current_pos),
    pack => { side => 'right', padx => 20 },
);



my $spectrum_w;
$spectrum_w = $main->insert(
    Widget =>
    ownerBackColor => 1,
    onClose => sub { undef $spectrum_w },
    pack      => { side => 'top', expand => 1, fill => 'both' },
);

$spectrum = Audio::Aoede::UI::Spectrum->new(
    parent => $spectrum_w,
    channels => [qw( left right )],
    f_min => $f_min,
    limit => $limit,
    tuner_base => 440,
    frequency_axis_type => sc::Log,
    size => [800,400],
    pack      => { side => 'left', expand => 1, fill => 'both' },
);

my $spectrum_options = $spectrum_w->insert(
    Widget =>
    ownerBackColor => 1,
    pack => { side => 'left', padx => 10 },
);

my $config_ui = Audio::Aoede::UI::Spectre::Options->new(
    parent => $spectrum_options,,
    fps => $fps // $timer->fps,
    fps_callback => sub ($fps) {
        return unless $fps;
        return if $fps <= 0; # Ignore empty or invalid input
        $timer->set_fps ($fps)
    },
    resolution => $resolution,
    resolution_callback => sub ($res) {
        return unless $res;   # Ignore empty input
        return if $res <= 0;  # Ignore invalid input
        $resolution = $res;
        run_spectrum($current_pos);
    },
    frequency_min => $f_min,
    frequency_min_callback => sub ($new) {
        return unless $new;     # Ignore empty or zero input
        return if $new <= 0;
        return unless $new <= 0.5 * $limit; # at least one octave
        $f_min = $new;
        $spectrum->set_frequency_min($new);
        run_spectrum($current_pos);
    },
    frequency_limit => $limit,
    frequency_limit_callback => sub ($new) {
        return unless $new;     # Ignore empty or zero input
        return unless $new >= 2*$f_min; # at least one octave
        return if $new < 100;   # totally arbitrary
        $limit = $new;
        $spectrum->set_limit($new);
        run_spectrum($current_pos);
    },
);

my $axis_opt = $spectrum_options->insert(
    GroupBox =>
    text => 'Frequency axis',
    pack => { side => 'top', padx => 10, anchor => 'w', },
);

$axis_opt->insert(
    Widget =>
    size => [1,20],
    pack => { side => 'top', anchor => 'w', },
);

$axis_opt->insert(
    Radio =>
    name => 'linear',
    onClick => sub { $spectrum->set_axis_linear },
    ownerBackColor => 1,
    pack      => { side => 'left', padx => 20, pady => 10, },
);

$axis_opt->insert(
    Radio =>
    name => 'logarithmic',
    checked => 1,
    onClick => sub { $spectrum->set_axis_logarithmic },
    ownerBackColor => 1,
    pack      => { side => 'left', padx => 20, pady => 10,},
);

my $tuner_area = $spectrum_options->insert(
    Widget =>
    ownerBackColor => 1,
    pack => { side => 'top', anchor => 'w', },
);

my ($tuner,$tuner_label);
$tuner_area->insert(
    CheckBox =>
    text => "Show halftone grid",
    ownerBackColor => 1,
    ownerBackColor => 1,
    pack => { side => 'top', anchor => 'w', },
    onClick => sub ($widget) {
        if ($widget->checked) {
            $tuner_label->show;
            $tuner->show;
            $spectrum->show_halftone_grid;
        }
        else {
            $tuner_label->hide;
            $tuner->hide;
            $spectrum->hide_halftone_grid;
        }
        run_spectrum($current_pos);
    }
);

$tuner_label = $tuner_area->insert(
    Label =>
    text => 'Fine tuning (cent)',
    ownerBackColor => 1,
    pack => { side => 'top' },
    visible => 0,
);

$tuner = $tuner_area->insert(
    CircularSlider =>
    buttons => 1,
    stdPointer => 1,
    increment => 1,
    min => -50,
    max => 50,
    onChange => sub ($widget) {
        my $v = $widget->value;
        $spectrum->set_tuner_base(440 * (2**($v/1200)));
        run_spectrum($current_pos);
    },
    ownerBackColor => 1,
    pack => { side => 'top', pady => 20, anchor => 'w', },
    visible => 0,
);


sub run_spectrum ($end) {
    return unless $end; # just starting
    return unless defined $left && $left->dim(0) > 0;
    return unless $resolution;
    return if $resolution <= 0;
    my $n_spectrum_samples = int($rate/$resolution);
    my $window = PDL::DSP::Windows->new($n_spectrum_samples);
    my $first = int($current_pos * $rate + 0.5) - $n_spectrum_samples;
    my $last  = $first + $n_spectrum_samples - 1;
    if ($first >= 0  and  $last < $left->dim(0)) {
        my $c_left = $left->slice([$first,$last]) * $window->samples;
        my $s_left =  $A->spectrum($c_left,$limit);
        my $c_right = $right->slice([$first,$last]) * $window->samples;
        my $s_right = $A->spectrum($c_right,$limit);
        $spectrum->update(left => $s_left, right => $s_right);
    }
}

sub read_pipe ($end) {
    my $n_samples = int ($rate * ($end-$current_pos) + 0.5);
    return if $n_samples <= 0;
    my $sound = $recorders{microphone}->read_pipe($n_samples);
    $current_pos += $sound->dim(1)/$rate;
    $player->send_piddle($sound);
    my @channels = $sound->transpose->dog;
    $left = defined $left ? $left->append($channels[0]) : $channels[0];
    $right = defined $right ? $right->append($channels[1]) : $channels[1];
    run_spectrum($end);
    $pos_slider->max($end // 0);
    $pos_slider->value($end);
    $pos_slider->repaint;
}


sub record () {
    if ($sound->dim(1)) {
        use Prima::MsgBox qw( message );
        my $response = message_box(
            q(We have a sound),
            q(Drop current sound or cancel recording?),
            mb::Yes|mb::Cancel|mb::Question);
        return if ($response eq mb::Cancel);
        if ($response  eq  mb::Yes) {
            $sound = zeroes(2,0);
            $left = pdl([]);
            $right = pdl([]);
        }
    }
    $current_file_label->text("Recording...");
    $current_file_label->repaint;
    $main->text("$title");
    $key_record->enabled(0);
    $key_pause->enabled(1);
    $key_stop->enabled(1);
    $key_play->enabled(0);

    $player->open_pipe;
    $recorders{microphone}->open_pipe;
    $timer->add_callback(\&read_pipe);
    $timer->reset_time;
    # show_state();
    $timer->start;
    $state = 'recording';
}


sub stop {
    $key_record->enabled(1);
    $key_play->enabled(1);
    $key_pause->enabled(0);
    $key_stop->enabled(0);
    adjust_slider(0);

    if ($state eq 'playing') {
        $timer->stop;
        $player->close_pipe;
        $spectrum->clear;
        $current_pos = 0;
    }
    elsif ($state eq 'paused') {
        $timer->reset_time;
        $player->close_pipe;
        $spectrum->clear;
        $current_pos = 0;
    }
    elsif ($state eq 'recording') {
        $timer->stop;
        $recorders{microphone}->close_pipe;
        $player->close_pipe;
        $spectrum->clear;
        # Now allow for replay
        $current_pos = 0;
        $sound = (cat ($left,$right))->transpose;
        my $sound_time = $sound->dim(1) / $rate;
        $pos_slider->max($sound_time);
    }
    $state = 'idle';
    # show_state();
}

sub shutdown {
#    $::application->close;
}

$::application->set(
    'onIdle' => sub {
        if ($run) {
            # This is for profiling: Read a file, play it, and
            # terminate the application.  Show the GUI during the
            # process.
            $auto_close = sub { $::application->close };
            $path = $run;
            $run = '';
            $current_file_label->text("Playing: $path");
            $current_file_label->repaint;
            $sound = $recorders{file}->read_file($path);
            ($left,$right) = $sound->transpose->dog;
            my $sound_time = $left->dim(0) / $rate;
            $pos_slider->max($sound_time);
            $key_play->enabled(1);
            $timer->reset_time;
	    $player->open_pipe;
	    $timer->add_callback(\&playback);
	    $timer->start;
            $timer->reset_time;
        }
    }
);

$main->show;
Prima->run;

# This can be invoked for diagnostic purposes.  Tread carefully while
# a timer is running.

sub show_state {
    use Prima::MsgBox qw( message );
    my %state = (
        'number of samples' => $sound->dim(1),
        'current time'      => $current_pos,
        'current sample'    => $current_pos * $rate,
    );
    my $formatted = join "\n",
        map { "$_ = $state{$_}" } sort keys %state;
    message($formatted,mb::Ok);
}


sub build_recorders ($rate,$bits,$channels) {
    my %recorders;
    # This one is unconditionally required for now
    use Audio::Aoede::Recorder::SoX;
    $recorders{file} = Audio::Aoede::Recorder::SoX->new(
        rate => $rate,
        bits => $bits,
        channels => $channels,
    );
    try {
        use Audio::Aoede::Recorder::PortAudio;
        $recorders{microphone} = Audio::Aoede::Recorder::PortAudio->new(
            rate => $rate,
            bits => $bits,
            channels => $channels,
        );
    }
    catch ($error) {
        warn <<~EOW;
            The PortAudio recorder is not available: '$error'.
            Falling back to SoX recording.
            EOW
        $recorders{microphone} = $recorders{file};
    }
    return %recorders;
}


sub format_time ($time) {
    return sprintf("%02d:%05.2f",int($time/60),$time % 60);
}
