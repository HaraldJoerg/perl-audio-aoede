#!/usr/bin/env perl
use 5.032;
use feature "signatures";
no warnings "experimental";

use FindBin;
use lib "$FindBin::Bin/../lib";

use Audio::Aoede::Player::SoX;
use Audio::Aoede::SoundFont;

our @generators;

my $rate = 48000;
my $base_frequency = 440; # A4
my $chromatic = 2**(1/12);
my $cent = 2**(1/1200);
my $out = $ARGV[1];

use MIDI::Simple ();
use PDL;

my $player = Audio::Aoede::Player::SoX->new(
    rate => $rate,
    bits => 16,
    channels => 2,
    out => $out,
);

my $midi_path = $ARGV[0] || "$FindBin::Bin/../midi/westmister_chimes.mid";
# FIXME: The next line should be a configuration item
my $soundfont = '/usr/share/sounds/sf2/sf_GMbank.sf2';
# $soundfont = '/usr/share/sounds/sf2/FluidR3_GM.sf2';
# $soundfont = '/usr/share/sounds/sf2/TimGM6mb.sf2';
my $midi     = MIDI::Simple->read_score($midi_path);
my $tempo    = $midi->Tempo;
my $end_time = $midi->Time;
my $tick;
my @notes;

my $sf = Audio::Aoede::SoundFont->from_file($soundfont);

my @score = $midi->Score;
@score = sort { $a->[1] <=> $b->[1] } @score;
push @score,['_end' => $end_time];

my @current_patches;

# ----------------------------------------------------------------------
# callback subroutines
sub set_tempo ($speed) {
    $tick = $speed / 1000_000 / $tempo;
}

sub text_event ($text) {
    say $text;
}

sub patch_change ($channel,$patch_number) {
    my $bank = 0;
    my $patch = $sf->patch($bank,$patch_number);
    my $patch_name = $patch->name;
    $current_patches[$channel] = $patch_number;
}

sub note ($duration,$channel,$note,$velocity) {
    my @sources = $sf->sources($channel,$current_patches[$channel],$note,$velocity,$rate);
    push @notes,map { [$_,$duration,$channel] } @sources;
}

sub time_signature ($numerator,$denominator,$metronome_clicks,$bb) {
    my $signature = {
        numerator        => $numerator,
        denominator      => 2**$denominator,
        metronome_clicks => $metronome_clicks,
        bb               => $bb,
    };
}

my $attenuation = 1.0;
my $volume      = 1.0;

sub _end ($end_time) {
    # Collect and play all remaining trailers, play in batches of 0.1 seconds
    my $batch = 0.1;
    my $n_samples = $rate * $batch;
    while (scalar @notes) {
        my @channels = (zeroes($n_samples),zeroes($n_samples));
        for my $note (@notes) {
            my ($source,$duration,$channel) = @$note;
            my $left  = 1/1000 * (500 - $source->pan);
            my $right = 1/1000 * (500 + $source->pan);
            my $since   = int($end_time*$tick*$rate + 0.5);
            my $samples = $source->trailer_samples($n_samples,$since);
            $channels[0] += $left  * $samples;
            $channels[1] += $right * $samples;
        }
        my $sound = cat(@channels)->transpose;
        my $max = $sound->abs->max;
        if ($max * $attenuation > $volume * 2**15) {
            $attenuation = $volume * 2**15 / $max;
        }
        $player->send_piddle(short ($sound * $attenuation));
        $end_time += int($batch/$tick+0.5);
        @notes = grep { ! $_->[0]->exhausted } @notes;
    }
    say "Done!";
}

# ----------------------------------------------------------------------

my %type_dispatch = (
    text_event     => \&text_event,
    patch_change   => \&patch_change,
    note           => \&note,
    set_tempo      => \&set_tempo,
    time_signature => \&time_signature,
#    _end           => \&_end,
);

patch_change(128,0); # make sure we have a default patch
$player->open_pipe;
my $current_time = 0;
my $samples_done = 0;
for my $entry (@score) {
    my ($type,$start_time,@params) = @$entry;
    if ($start_time > $current_time) {
        my $todo = $start_time - $current_time;
        my $since   = int($current_time*$tick*$rate + 0.5);
        my $to      = int($start_time*$tick*$rate + 0.5);
        my $n_samples = $to-$since;
        my @channels = (zeroes($n_samples),zeroes($n_samples));
      NOTE:
        for my $note (@notes) {
            my ($source,$duration,$channel) = @$note;
            my $left  = 1/1000 * (500 - $source->pan);
            my $right = 1/1000 * (500 + $source->pan);
            if ($duration > $todo) {
                my $samples = $source->next_samples($n_samples,$since);
                $channels[0] += $left  * $samples;
                $channels[1] += $right * $samples;
                $note->[1] = $duration - $start_time + $current_time;
            }
            elsif ($duration == $todo) {
                my $samples = $source->next_samples($n_samples,$since);
                $channels[0] += $left  * $samples;
                $channels[1] += $right * $samples;
                $note->[1] = 0;
                $source->released($since + $n_samples);
            }
            else {
                my $note_ends = int($duration * $rate * $tick + 0.5);
                if ($note_ends > 0) {
                    my $samples = $source->next_samples($note_ends,$since);
                    $channels[0]->slice([0,$note_ends-1]) += $left  * $samples;
                    $channels[1]->slice([0,$note_ends-1]) += $right * $samples;
                    $note->[1] = 0;
                    $source->released($since + $note_ends);
                }
                my $rest = $source->next_samples($n_samples-$note_ends,$since+$note_ends);
                $channels[0]->slice([$note_ends,$n_samples-1]) += $left  * $rest;
                $channels[1]->slice([$note_ends,$n_samples-1]) += $right * $rest;
            }
        }
        @notes = grep { ! $_->[0]->exhausted } @notes;
        $current_time = $start_time;
        my $sound = cat(@channels)->transpose;
        my $max = $sound->abs->max;
        if ($max * $attenuation > $volume * 2**14) {
            $attenuation = $volume * 2**14 / $max;
        }
        $player->send_piddle(short ($sound * $attenuation));
    }
    if ((my $handler = $type_dispatch{$type})) {
        &$handler(@params);
    }
    elsif ($type eq '_end') {
        _end($start_time);
    }
    else {
        warn "Type '$type' not handled\n";
    }
}


$player->close_pipe;

__END__

=encoding utf8

=head1 NAME

midi_play - Play a MIDI file through SoX

=head1 SYNOPSIS

  $ midi_play foo.mid  # Play immediately
  $ midi_play foo.mid foo.ogg # convert to a .ogg file

=head1 DESCRIPTION

This program combines a MIDI file and a SoundFont file (hardwired,
sorry for that) into raw sound data, and pipes it to SoX (an audio
player for many platforms).  SoX can either play the data or convert
them to a selection of audio formats.

=head1 OPTIONS

The program takes two positional parameters.  The first parameter is
the path to a MIDI file and is required.  If a second parameter is
given, it should be a path to an output file in one of the formats
which SoX can create (.ogg, .wav, .mp3 - the exact list depend on how
SoX was compiled).

=head1 ERRORS

The error handling of this program is very rudimentary.  If a MIDI
file contains an unimplemented command, you get a warning and
processing continues.

=head1 BUGS

The path to the SoundFont file is hardcoded in the source.

Several MIDI commands are not supported.  We do C<text_event>,
C<patch_change>, C<note>, C<set_tempo> and C<time_signature> only.

Several SoundFont generators and modulators are silently ignored, and
some might be implemented with a wrong algorithm.

=head1 RESTRICTIONS

I do not plan to support F<.sf3> soundfont files.

=head1 AUTHOR

Harald Jörg, E<lt>haj@posteo.deE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2025 Harald Jörg.

This file is part of the Audio-Aoede suite.  This is free software;
you may redistribute it and/or modify it under the same terms as Perl
itself.

=cut

